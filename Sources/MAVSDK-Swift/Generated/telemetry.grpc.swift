//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: telemetry.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Dispatch
import Foundation
import SwiftGRPC
import SwiftProtobuf

internal protocol Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribePositionCall: ClientCallServerStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> Mavsdk_Rpc_Telemetry_PositionResponse?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<Mavsdk_Rpc_Telemetry_PositionResponse?>) -> Void) throws
}

internal extension Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribePositionCall {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> Mavsdk_Rpc_Telemetry_PositionResponse? { return try self._receive(timeout: timeout) }
}

fileprivate final class Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribePositionCallBase: ClientCallServerStreamingBase<Mavsdk_Rpc_Telemetry_SubscribePositionRequest, Mavsdk_Rpc_Telemetry_PositionResponse>, Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribePositionCall {
  override class var method: String { return "/mavsdk.rpc.telemetry.TelemetryService/SubscribePosition" }
}

internal protocol Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeHomeCall: ClientCallServerStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> Mavsdk_Rpc_Telemetry_HomeResponse?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<Mavsdk_Rpc_Telemetry_HomeResponse?>) -> Void) throws
}

internal extension Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeHomeCall {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> Mavsdk_Rpc_Telemetry_HomeResponse? { return try self._receive(timeout: timeout) }
}

fileprivate final class Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeHomeCallBase: ClientCallServerStreamingBase<Mavsdk_Rpc_Telemetry_SubscribeHomeRequest, Mavsdk_Rpc_Telemetry_HomeResponse>, Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeHomeCall {
  override class var method: String { return "/mavsdk.rpc.telemetry.TelemetryService/SubscribeHome" }
}

internal protocol Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeInAirCall: ClientCallServerStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> Mavsdk_Rpc_Telemetry_InAirResponse?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<Mavsdk_Rpc_Telemetry_InAirResponse?>) -> Void) throws
}

internal extension Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeInAirCall {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> Mavsdk_Rpc_Telemetry_InAirResponse? { return try self._receive(timeout: timeout) }
}

fileprivate final class Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeInAirCallBase: ClientCallServerStreamingBase<Mavsdk_Rpc_Telemetry_SubscribeInAirRequest, Mavsdk_Rpc_Telemetry_InAirResponse>, Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeInAirCall {
  override class var method: String { return "/mavsdk.rpc.telemetry.TelemetryService/SubscribeInAir" }
}

internal protocol Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeArmedCall: ClientCallServerStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> Mavsdk_Rpc_Telemetry_ArmedResponse?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<Mavsdk_Rpc_Telemetry_ArmedResponse?>) -> Void) throws
}

internal extension Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeArmedCall {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> Mavsdk_Rpc_Telemetry_ArmedResponse? { return try self._receive(timeout: timeout) }
}

fileprivate final class Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeArmedCallBase: ClientCallServerStreamingBase<Mavsdk_Rpc_Telemetry_SubscribeArmedRequest, Mavsdk_Rpc_Telemetry_ArmedResponse>, Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeArmedCall {
  override class var method: String { return "/mavsdk.rpc.telemetry.TelemetryService/SubscribeArmed" }
}

internal protocol Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeQuaternionCall: ClientCallServerStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> Mavsdk_Rpc_Telemetry_AttitudeQuaternionResponse?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<Mavsdk_Rpc_Telemetry_AttitudeQuaternionResponse?>) -> Void) throws
}

internal extension Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeQuaternionCall {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> Mavsdk_Rpc_Telemetry_AttitudeQuaternionResponse? { return try self._receive(timeout: timeout) }
}

fileprivate final class Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeQuaternionCallBase: ClientCallServerStreamingBase<Mavsdk_Rpc_Telemetry_SubscribeAttitudeQuaternionRequest, Mavsdk_Rpc_Telemetry_AttitudeQuaternionResponse>, Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeQuaternionCall {
  override class var method: String { return "/mavsdk.rpc.telemetry.TelemetryService/SubscribeAttitudeQuaternion" }
}

internal protocol Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeEulerCall: ClientCallServerStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> Mavsdk_Rpc_Telemetry_AttitudeEulerResponse?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<Mavsdk_Rpc_Telemetry_AttitudeEulerResponse?>) -> Void) throws
}

internal extension Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeEulerCall {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> Mavsdk_Rpc_Telemetry_AttitudeEulerResponse? { return try self._receive(timeout: timeout) }
}

fileprivate final class Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeEulerCallBase: ClientCallServerStreamingBase<Mavsdk_Rpc_Telemetry_SubscribeAttitudeEulerRequest, Mavsdk_Rpc_Telemetry_AttitudeEulerResponse>, Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeEulerCall {
  override class var method: String { return "/mavsdk.rpc.telemetry.TelemetryService/SubscribeAttitudeEuler" }
}

internal protocol Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeQuaternionCall: ClientCallServerStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> Mavsdk_Rpc_Telemetry_CameraAttitudeQuaternionResponse?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<Mavsdk_Rpc_Telemetry_CameraAttitudeQuaternionResponse?>) -> Void) throws
}

internal extension Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeQuaternionCall {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> Mavsdk_Rpc_Telemetry_CameraAttitudeQuaternionResponse? { return try self._receive(timeout: timeout) }
}

fileprivate final class Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeQuaternionCallBase: ClientCallServerStreamingBase<Mavsdk_Rpc_Telemetry_SubscribeCameraAttitudeQuaternionRequest, Mavsdk_Rpc_Telemetry_CameraAttitudeQuaternionResponse>, Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeQuaternionCall {
  override class var method: String { return "/mavsdk.rpc.telemetry.TelemetryService/SubscribeCameraAttitudeQuaternion" }
}

internal protocol Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeEulerCall: ClientCallServerStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> Mavsdk_Rpc_Telemetry_CameraAttitudeEulerResponse?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<Mavsdk_Rpc_Telemetry_CameraAttitudeEulerResponse?>) -> Void) throws
}

internal extension Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeEulerCall {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> Mavsdk_Rpc_Telemetry_CameraAttitudeEulerResponse? { return try self._receive(timeout: timeout) }
}

fileprivate final class Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeEulerCallBase: ClientCallServerStreamingBase<Mavsdk_Rpc_Telemetry_SubscribeCameraAttitudeEulerRequest, Mavsdk_Rpc_Telemetry_CameraAttitudeEulerResponse>, Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeEulerCall {
  override class var method: String { return "/mavsdk.rpc.telemetry.TelemetryService/SubscribeCameraAttitudeEuler" }
}

internal protocol Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeGroundSpeedNedCall: ClientCallServerStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> Mavsdk_Rpc_Telemetry_GroundSpeedNedResponse?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<Mavsdk_Rpc_Telemetry_GroundSpeedNedResponse?>) -> Void) throws
}

internal extension Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeGroundSpeedNedCall {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> Mavsdk_Rpc_Telemetry_GroundSpeedNedResponse? { return try self._receive(timeout: timeout) }
}

fileprivate final class Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeGroundSpeedNedCallBase: ClientCallServerStreamingBase<Mavsdk_Rpc_Telemetry_SubscribeGroundSpeedNedRequest, Mavsdk_Rpc_Telemetry_GroundSpeedNedResponse>, Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeGroundSpeedNedCall {
  override class var method: String { return "/mavsdk.rpc.telemetry.TelemetryService/SubscribeGroundSpeedNed" }
}

internal protocol Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeGpsInfoCall: ClientCallServerStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> Mavsdk_Rpc_Telemetry_GpsInfoResponse?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<Mavsdk_Rpc_Telemetry_GpsInfoResponse?>) -> Void) throws
}

internal extension Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeGpsInfoCall {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> Mavsdk_Rpc_Telemetry_GpsInfoResponse? { return try self._receive(timeout: timeout) }
}

fileprivate final class Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeGpsInfoCallBase: ClientCallServerStreamingBase<Mavsdk_Rpc_Telemetry_SubscribeGpsInfoRequest, Mavsdk_Rpc_Telemetry_GpsInfoResponse>, Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeGpsInfoCall {
  override class var method: String { return "/mavsdk.rpc.telemetry.TelemetryService/SubscribeGpsInfo" }
}

internal protocol Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeBatteryCall: ClientCallServerStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> Mavsdk_Rpc_Telemetry_BatteryResponse?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<Mavsdk_Rpc_Telemetry_BatteryResponse?>) -> Void) throws
}

internal extension Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeBatteryCall {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> Mavsdk_Rpc_Telemetry_BatteryResponse? { return try self._receive(timeout: timeout) }
}

fileprivate final class Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeBatteryCallBase: ClientCallServerStreamingBase<Mavsdk_Rpc_Telemetry_SubscribeBatteryRequest, Mavsdk_Rpc_Telemetry_BatteryResponse>, Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeBatteryCall {
  override class var method: String { return "/mavsdk.rpc.telemetry.TelemetryService/SubscribeBattery" }
}

internal protocol Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeFlightModeCall: ClientCallServerStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> Mavsdk_Rpc_Telemetry_FlightModeResponse?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<Mavsdk_Rpc_Telemetry_FlightModeResponse?>) -> Void) throws
}

internal extension Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeFlightModeCall {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> Mavsdk_Rpc_Telemetry_FlightModeResponse? { return try self._receive(timeout: timeout) }
}

fileprivate final class Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeFlightModeCallBase: ClientCallServerStreamingBase<Mavsdk_Rpc_Telemetry_SubscribeFlightModeRequest, Mavsdk_Rpc_Telemetry_FlightModeResponse>, Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeFlightModeCall {
  override class var method: String { return "/mavsdk.rpc.telemetry.TelemetryService/SubscribeFlightMode" }
}

internal protocol Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeHealthCall: ClientCallServerStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> Mavsdk_Rpc_Telemetry_HealthResponse?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<Mavsdk_Rpc_Telemetry_HealthResponse?>) -> Void) throws
}

internal extension Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeHealthCall {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> Mavsdk_Rpc_Telemetry_HealthResponse? { return try self._receive(timeout: timeout) }
}

fileprivate final class Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeHealthCallBase: ClientCallServerStreamingBase<Mavsdk_Rpc_Telemetry_SubscribeHealthRequest, Mavsdk_Rpc_Telemetry_HealthResponse>, Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeHealthCall {
  override class var method: String { return "/mavsdk.rpc.telemetry.TelemetryService/SubscribeHealth" }
}

internal protocol Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeRcStatusCall: ClientCallServerStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> Mavsdk_Rpc_Telemetry_RcStatusResponse?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<Mavsdk_Rpc_Telemetry_RcStatusResponse?>) -> Void) throws
}

internal extension Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeRcStatusCall {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> Mavsdk_Rpc_Telemetry_RcStatusResponse? { return try self._receive(timeout: timeout) }
}

fileprivate final class Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeRcStatusCallBase: ClientCallServerStreamingBase<Mavsdk_Rpc_Telemetry_SubscribeRcStatusRequest, Mavsdk_Rpc_Telemetry_RcStatusResponse>, Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeRcStatusCall {
  override class var method: String { return "/mavsdk.rpc.telemetry.TelemetryService/SubscribeRcStatus" }
}

internal protocol Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeStatusTextCall: ClientCallServerStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> Mavsdk_Rpc_Telemetry_StatusTextResponse?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<Mavsdk_Rpc_Telemetry_StatusTextResponse?>) -> Void) throws
}

internal extension Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeStatusTextCall {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> Mavsdk_Rpc_Telemetry_StatusTextResponse? { return try self._receive(timeout: timeout) }
}

fileprivate final class Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeStatusTextCallBase: ClientCallServerStreamingBase<Mavsdk_Rpc_Telemetry_SubscribeStatusTextRequest, Mavsdk_Rpc_Telemetry_StatusTextResponse>, Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeStatusTextCall {
  override class var method: String { return "/mavsdk.rpc.telemetry.TelemetryService/SubscribeStatusText" }
}


/// Instantiate Mavsdk_Rpc_Telemetry_TelemetryServiceServiceClient, then call methods of this protocol to make API calls.
internal protocol Mavsdk_Rpc_Telemetry_TelemetryServiceService: ServiceClient {
  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  func subscribePosition(_ request: Mavsdk_Rpc_Telemetry_SubscribePositionRequest, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribePositionCall

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  func subscribeHome(_ request: Mavsdk_Rpc_Telemetry_SubscribeHomeRequest, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeHomeCall

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  func subscribeInAir(_ request: Mavsdk_Rpc_Telemetry_SubscribeInAirRequest, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeInAirCall

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  func subscribeArmed(_ request: Mavsdk_Rpc_Telemetry_SubscribeArmedRequest, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeArmedCall

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  func subscribeAttitudeQuaternion(_ request: Mavsdk_Rpc_Telemetry_SubscribeAttitudeQuaternionRequest, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeQuaternionCall

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  func subscribeAttitudeEuler(_ request: Mavsdk_Rpc_Telemetry_SubscribeAttitudeEulerRequest, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeEulerCall

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  func subscribeCameraAttitudeQuaternion(_ request: Mavsdk_Rpc_Telemetry_SubscribeCameraAttitudeQuaternionRequest, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeQuaternionCall

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  func subscribeCameraAttitudeEuler(_ request: Mavsdk_Rpc_Telemetry_SubscribeCameraAttitudeEulerRequest, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeEulerCall

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  func subscribeGroundSpeedNed(_ request: Mavsdk_Rpc_Telemetry_SubscribeGroundSpeedNedRequest, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeGroundSpeedNedCall

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  func subscribeGpsInfo(_ request: Mavsdk_Rpc_Telemetry_SubscribeGpsInfoRequest, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeGpsInfoCall

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  func subscribeBattery(_ request: Mavsdk_Rpc_Telemetry_SubscribeBatteryRequest, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeBatteryCall

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  func subscribeFlightMode(_ request: Mavsdk_Rpc_Telemetry_SubscribeFlightModeRequest, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeFlightModeCall

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  func subscribeHealth(_ request: Mavsdk_Rpc_Telemetry_SubscribeHealthRequest, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeHealthCall

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  func subscribeRcStatus(_ request: Mavsdk_Rpc_Telemetry_SubscribeRcStatusRequest, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeRcStatusCall

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  func subscribeStatusText(_ request: Mavsdk_Rpc_Telemetry_SubscribeStatusTextRequest, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeStatusTextCall

}

internal extension Mavsdk_Rpc_Telemetry_TelemetryServiceService {
  /// Asynchronous. Server-streaming.
  func subscribePosition(_ request: Mavsdk_Rpc_Telemetry_SubscribePositionRequest, completion: ((CallResult) -> Void)?) throws -> Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribePositionCall {
    return try self.subscribePosition(request, metadata: self.metadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  func subscribeHome(_ request: Mavsdk_Rpc_Telemetry_SubscribeHomeRequest, completion: ((CallResult) -> Void)?) throws -> Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeHomeCall {
    return try self.subscribeHome(request, metadata: self.metadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  func subscribeInAir(_ request: Mavsdk_Rpc_Telemetry_SubscribeInAirRequest, completion: ((CallResult) -> Void)?) throws -> Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeInAirCall {
    return try self.subscribeInAir(request, metadata: self.metadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  func subscribeArmed(_ request: Mavsdk_Rpc_Telemetry_SubscribeArmedRequest, completion: ((CallResult) -> Void)?) throws -> Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeArmedCall {
    return try self.subscribeArmed(request, metadata: self.metadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  func subscribeAttitudeQuaternion(_ request: Mavsdk_Rpc_Telemetry_SubscribeAttitudeQuaternionRequest, completion: ((CallResult) -> Void)?) throws -> Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeQuaternionCall {
    return try self.subscribeAttitudeQuaternion(request, metadata: self.metadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  func subscribeAttitudeEuler(_ request: Mavsdk_Rpc_Telemetry_SubscribeAttitudeEulerRequest, completion: ((CallResult) -> Void)?) throws -> Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeEulerCall {
    return try self.subscribeAttitudeEuler(request, metadata: self.metadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  func subscribeCameraAttitudeQuaternion(_ request: Mavsdk_Rpc_Telemetry_SubscribeCameraAttitudeQuaternionRequest, completion: ((CallResult) -> Void)?) throws -> Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeQuaternionCall {
    return try self.subscribeCameraAttitudeQuaternion(request, metadata: self.metadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  func subscribeCameraAttitudeEuler(_ request: Mavsdk_Rpc_Telemetry_SubscribeCameraAttitudeEulerRequest, completion: ((CallResult) -> Void)?) throws -> Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeEulerCall {
    return try self.subscribeCameraAttitudeEuler(request, metadata: self.metadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  func subscribeGroundSpeedNed(_ request: Mavsdk_Rpc_Telemetry_SubscribeGroundSpeedNedRequest, completion: ((CallResult) -> Void)?) throws -> Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeGroundSpeedNedCall {
    return try self.subscribeGroundSpeedNed(request, metadata: self.metadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  func subscribeGpsInfo(_ request: Mavsdk_Rpc_Telemetry_SubscribeGpsInfoRequest, completion: ((CallResult) -> Void)?) throws -> Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeGpsInfoCall {
    return try self.subscribeGpsInfo(request, metadata: self.metadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  func subscribeBattery(_ request: Mavsdk_Rpc_Telemetry_SubscribeBatteryRequest, completion: ((CallResult) -> Void)?) throws -> Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeBatteryCall {
    return try self.subscribeBattery(request, metadata: self.metadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  func subscribeFlightMode(_ request: Mavsdk_Rpc_Telemetry_SubscribeFlightModeRequest, completion: ((CallResult) -> Void)?) throws -> Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeFlightModeCall {
    return try self.subscribeFlightMode(request, metadata: self.metadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  func subscribeHealth(_ request: Mavsdk_Rpc_Telemetry_SubscribeHealthRequest, completion: ((CallResult) -> Void)?) throws -> Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeHealthCall {
    return try self.subscribeHealth(request, metadata: self.metadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  func subscribeRcStatus(_ request: Mavsdk_Rpc_Telemetry_SubscribeRcStatusRequest, completion: ((CallResult) -> Void)?) throws -> Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeRcStatusCall {
    return try self.subscribeRcStatus(request, metadata: self.metadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  func subscribeStatusText(_ request: Mavsdk_Rpc_Telemetry_SubscribeStatusTextRequest, completion: ((CallResult) -> Void)?) throws -> Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeStatusTextCall {
    return try self.subscribeStatusText(request, metadata: self.metadata, completion: completion)
  }

}

internal final class Mavsdk_Rpc_Telemetry_TelemetryServiceServiceClient: ServiceClientBase, Mavsdk_Rpc_Telemetry_TelemetryServiceService {
  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  internal func subscribePosition(_ request: Mavsdk_Rpc_Telemetry_SubscribePositionRequest, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribePositionCall {
    return try Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribePositionCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  internal func subscribeHome(_ request: Mavsdk_Rpc_Telemetry_SubscribeHomeRequest, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeHomeCall {
    return try Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeHomeCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  internal func subscribeInAir(_ request: Mavsdk_Rpc_Telemetry_SubscribeInAirRequest, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeInAirCall {
    return try Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeInAirCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  internal func subscribeArmed(_ request: Mavsdk_Rpc_Telemetry_SubscribeArmedRequest, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeArmedCall {
    return try Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeArmedCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  internal func subscribeAttitudeQuaternion(_ request: Mavsdk_Rpc_Telemetry_SubscribeAttitudeQuaternionRequest, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeQuaternionCall {
    return try Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeQuaternionCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  internal func subscribeAttitudeEuler(_ request: Mavsdk_Rpc_Telemetry_SubscribeAttitudeEulerRequest, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeEulerCall {
    return try Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeEulerCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  internal func subscribeCameraAttitudeQuaternion(_ request: Mavsdk_Rpc_Telemetry_SubscribeCameraAttitudeQuaternionRequest, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeQuaternionCall {
    return try Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeQuaternionCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  internal func subscribeCameraAttitudeEuler(_ request: Mavsdk_Rpc_Telemetry_SubscribeCameraAttitudeEulerRequest, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeEulerCall {
    return try Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeEulerCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  internal func subscribeGroundSpeedNed(_ request: Mavsdk_Rpc_Telemetry_SubscribeGroundSpeedNedRequest, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeGroundSpeedNedCall {
    return try Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeGroundSpeedNedCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  internal func subscribeGpsInfo(_ request: Mavsdk_Rpc_Telemetry_SubscribeGpsInfoRequest, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeGpsInfoCall {
    return try Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeGpsInfoCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  internal func subscribeBattery(_ request: Mavsdk_Rpc_Telemetry_SubscribeBatteryRequest, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeBatteryCall {
    return try Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeBatteryCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  internal func subscribeFlightMode(_ request: Mavsdk_Rpc_Telemetry_SubscribeFlightModeRequest, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeFlightModeCall {
    return try Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeFlightModeCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  internal func subscribeHealth(_ request: Mavsdk_Rpc_Telemetry_SubscribeHealthRequest, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeHealthCall {
    return try Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeHealthCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  internal func subscribeRcStatus(_ request: Mavsdk_Rpc_Telemetry_SubscribeRcStatusRequest, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeRcStatusCall {
    return try Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeRcStatusCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  internal func subscribeStatusText(_ request: Mavsdk_Rpc_Telemetry_SubscribeStatusTextRequest, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeStatusTextCall {
    return try Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeStatusTextCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

}

class Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribePositionCallTestStub: ClientCallServerStreamingTestStub<Mavsdk_Rpc_Telemetry_PositionResponse>, Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribePositionCall {
  override class var method: String { return "/mavsdk.rpc.telemetry.TelemetryService/SubscribePosition" }
}

class Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeHomeCallTestStub: ClientCallServerStreamingTestStub<Mavsdk_Rpc_Telemetry_HomeResponse>, Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeHomeCall {
  override class var method: String { return "/mavsdk.rpc.telemetry.TelemetryService/SubscribeHome" }
}

class Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeInAirCallTestStub: ClientCallServerStreamingTestStub<Mavsdk_Rpc_Telemetry_InAirResponse>, Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeInAirCall {
  override class var method: String { return "/mavsdk.rpc.telemetry.TelemetryService/SubscribeInAir" }
}

class Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeArmedCallTestStub: ClientCallServerStreamingTestStub<Mavsdk_Rpc_Telemetry_ArmedResponse>, Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeArmedCall {
  override class var method: String { return "/mavsdk.rpc.telemetry.TelemetryService/SubscribeArmed" }
}

class Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeQuaternionCallTestStub: ClientCallServerStreamingTestStub<Mavsdk_Rpc_Telemetry_AttitudeQuaternionResponse>, Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeQuaternionCall {
  override class var method: String { return "/mavsdk.rpc.telemetry.TelemetryService/SubscribeAttitudeQuaternion" }
}

class Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeEulerCallTestStub: ClientCallServerStreamingTestStub<Mavsdk_Rpc_Telemetry_AttitudeEulerResponse>, Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeEulerCall {
  override class var method: String { return "/mavsdk.rpc.telemetry.TelemetryService/SubscribeAttitudeEuler" }
}

class Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeQuaternionCallTestStub: ClientCallServerStreamingTestStub<Mavsdk_Rpc_Telemetry_CameraAttitudeQuaternionResponse>, Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeQuaternionCall {
  override class var method: String { return "/mavsdk.rpc.telemetry.TelemetryService/SubscribeCameraAttitudeQuaternion" }
}

class Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeEulerCallTestStub: ClientCallServerStreamingTestStub<Mavsdk_Rpc_Telemetry_CameraAttitudeEulerResponse>, Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeEulerCall {
  override class var method: String { return "/mavsdk.rpc.telemetry.TelemetryService/SubscribeCameraAttitudeEuler" }
}

class Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeGroundSpeedNedCallTestStub: ClientCallServerStreamingTestStub<Mavsdk_Rpc_Telemetry_GroundSpeedNedResponse>, Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeGroundSpeedNedCall {
  override class var method: String { return "/mavsdk.rpc.telemetry.TelemetryService/SubscribeGroundSpeedNed" }
}

class Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeGpsInfoCallTestStub: ClientCallServerStreamingTestStub<Mavsdk_Rpc_Telemetry_GpsInfoResponse>, Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeGpsInfoCall {
  override class var method: String { return "/mavsdk.rpc.telemetry.TelemetryService/SubscribeGpsInfo" }
}

class Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeBatteryCallTestStub: ClientCallServerStreamingTestStub<Mavsdk_Rpc_Telemetry_BatteryResponse>, Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeBatteryCall {
  override class var method: String { return "/mavsdk.rpc.telemetry.TelemetryService/SubscribeBattery" }
}

class Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeFlightModeCallTestStub: ClientCallServerStreamingTestStub<Mavsdk_Rpc_Telemetry_FlightModeResponse>, Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeFlightModeCall {
  override class var method: String { return "/mavsdk.rpc.telemetry.TelemetryService/SubscribeFlightMode" }
}

class Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeHealthCallTestStub: ClientCallServerStreamingTestStub<Mavsdk_Rpc_Telemetry_HealthResponse>, Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeHealthCall {
  override class var method: String { return "/mavsdk.rpc.telemetry.TelemetryService/SubscribeHealth" }
}

class Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeRcStatusCallTestStub: ClientCallServerStreamingTestStub<Mavsdk_Rpc_Telemetry_RcStatusResponse>, Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeRcStatusCall {
  override class var method: String { return "/mavsdk.rpc.telemetry.TelemetryService/SubscribeRcStatus" }
}

class Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeStatusTextCallTestStub: ClientCallServerStreamingTestStub<Mavsdk_Rpc_Telemetry_StatusTextResponse>, Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeStatusTextCall {
  override class var method: String { return "/mavsdk.rpc.telemetry.TelemetryService/SubscribeStatusText" }
}

class Mavsdk_Rpc_Telemetry_TelemetryServiceServiceTestStub: ServiceClientTestStubBase, Mavsdk_Rpc_Telemetry_TelemetryServiceService {
  var subscribePositionRequests: [Mavsdk_Rpc_Telemetry_SubscribePositionRequest] = []
  var subscribePositionCalls: [Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribePositionCall] = []
  func subscribePosition(_ request: Mavsdk_Rpc_Telemetry_SubscribePositionRequest, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribePositionCall {
    subscribePositionRequests.append(request)
    defer { subscribePositionCalls.removeFirst() }
    return subscribePositionCalls.first!
  }

  var subscribeHomeRequests: [Mavsdk_Rpc_Telemetry_SubscribeHomeRequest] = []
  var subscribeHomeCalls: [Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeHomeCall] = []
  func subscribeHome(_ request: Mavsdk_Rpc_Telemetry_SubscribeHomeRequest, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeHomeCall {
    subscribeHomeRequests.append(request)
    defer { subscribeHomeCalls.removeFirst() }
    return subscribeHomeCalls.first!
  }

  var subscribeInAirRequests: [Mavsdk_Rpc_Telemetry_SubscribeInAirRequest] = []
  var subscribeInAirCalls: [Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeInAirCall] = []
  func subscribeInAir(_ request: Mavsdk_Rpc_Telemetry_SubscribeInAirRequest, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeInAirCall {
    subscribeInAirRequests.append(request)
    defer { subscribeInAirCalls.removeFirst() }
    return subscribeInAirCalls.first!
  }

  var subscribeArmedRequests: [Mavsdk_Rpc_Telemetry_SubscribeArmedRequest] = []
  var subscribeArmedCalls: [Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeArmedCall] = []
  func subscribeArmed(_ request: Mavsdk_Rpc_Telemetry_SubscribeArmedRequest, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeArmedCall {
    subscribeArmedRequests.append(request)
    defer { subscribeArmedCalls.removeFirst() }
    return subscribeArmedCalls.first!
  }

  var subscribeAttitudeQuaternionRequests: [Mavsdk_Rpc_Telemetry_SubscribeAttitudeQuaternionRequest] = []
  var subscribeAttitudeQuaternionCalls: [Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeQuaternionCall] = []
  func subscribeAttitudeQuaternion(_ request: Mavsdk_Rpc_Telemetry_SubscribeAttitudeQuaternionRequest, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeQuaternionCall {
    subscribeAttitudeQuaternionRequests.append(request)
    defer { subscribeAttitudeQuaternionCalls.removeFirst() }
    return subscribeAttitudeQuaternionCalls.first!
  }

  var subscribeAttitudeEulerRequests: [Mavsdk_Rpc_Telemetry_SubscribeAttitudeEulerRequest] = []
  var subscribeAttitudeEulerCalls: [Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeEulerCall] = []
  func subscribeAttitudeEuler(_ request: Mavsdk_Rpc_Telemetry_SubscribeAttitudeEulerRequest, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeEulerCall {
    subscribeAttitudeEulerRequests.append(request)
    defer { subscribeAttitudeEulerCalls.removeFirst() }
    return subscribeAttitudeEulerCalls.first!
  }

  var subscribeCameraAttitudeQuaternionRequests: [Mavsdk_Rpc_Telemetry_SubscribeCameraAttitudeQuaternionRequest] = []
  var subscribeCameraAttitudeQuaternionCalls: [Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeQuaternionCall] = []
  func subscribeCameraAttitudeQuaternion(_ request: Mavsdk_Rpc_Telemetry_SubscribeCameraAttitudeQuaternionRequest, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeQuaternionCall {
    subscribeCameraAttitudeQuaternionRequests.append(request)
    defer { subscribeCameraAttitudeQuaternionCalls.removeFirst() }
    return subscribeCameraAttitudeQuaternionCalls.first!
  }

  var subscribeCameraAttitudeEulerRequests: [Mavsdk_Rpc_Telemetry_SubscribeCameraAttitudeEulerRequest] = []
  var subscribeCameraAttitudeEulerCalls: [Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeEulerCall] = []
  func subscribeCameraAttitudeEuler(_ request: Mavsdk_Rpc_Telemetry_SubscribeCameraAttitudeEulerRequest, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeEulerCall {
    subscribeCameraAttitudeEulerRequests.append(request)
    defer { subscribeCameraAttitudeEulerCalls.removeFirst() }
    return subscribeCameraAttitudeEulerCalls.first!
  }

  var subscribeGroundSpeedNedRequests: [Mavsdk_Rpc_Telemetry_SubscribeGroundSpeedNedRequest] = []
  var subscribeGroundSpeedNedCalls: [Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeGroundSpeedNedCall] = []
  func subscribeGroundSpeedNed(_ request: Mavsdk_Rpc_Telemetry_SubscribeGroundSpeedNedRequest, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeGroundSpeedNedCall {
    subscribeGroundSpeedNedRequests.append(request)
    defer { subscribeGroundSpeedNedCalls.removeFirst() }
    return subscribeGroundSpeedNedCalls.first!
  }

  var subscribeGpsInfoRequests: [Mavsdk_Rpc_Telemetry_SubscribeGpsInfoRequest] = []
  var subscribeGpsInfoCalls: [Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeGpsInfoCall] = []
  func subscribeGpsInfo(_ request: Mavsdk_Rpc_Telemetry_SubscribeGpsInfoRequest, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeGpsInfoCall {
    subscribeGpsInfoRequests.append(request)
    defer { subscribeGpsInfoCalls.removeFirst() }
    return subscribeGpsInfoCalls.first!
  }

  var subscribeBatteryRequests: [Mavsdk_Rpc_Telemetry_SubscribeBatteryRequest] = []
  var subscribeBatteryCalls: [Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeBatteryCall] = []
  func subscribeBattery(_ request: Mavsdk_Rpc_Telemetry_SubscribeBatteryRequest, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeBatteryCall {
    subscribeBatteryRequests.append(request)
    defer { subscribeBatteryCalls.removeFirst() }
    return subscribeBatteryCalls.first!
  }

  var subscribeFlightModeRequests: [Mavsdk_Rpc_Telemetry_SubscribeFlightModeRequest] = []
  var subscribeFlightModeCalls: [Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeFlightModeCall] = []
  func subscribeFlightMode(_ request: Mavsdk_Rpc_Telemetry_SubscribeFlightModeRequest, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeFlightModeCall {
    subscribeFlightModeRequests.append(request)
    defer { subscribeFlightModeCalls.removeFirst() }
    return subscribeFlightModeCalls.first!
  }

  var subscribeHealthRequests: [Mavsdk_Rpc_Telemetry_SubscribeHealthRequest] = []
  var subscribeHealthCalls: [Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeHealthCall] = []
  func subscribeHealth(_ request: Mavsdk_Rpc_Telemetry_SubscribeHealthRequest, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeHealthCall {
    subscribeHealthRequests.append(request)
    defer { subscribeHealthCalls.removeFirst() }
    return subscribeHealthCalls.first!
  }

  var subscribeRcStatusRequests: [Mavsdk_Rpc_Telemetry_SubscribeRcStatusRequest] = []
  var subscribeRcStatusCalls: [Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeRcStatusCall] = []
  func subscribeRcStatus(_ request: Mavsdk_Rpc_Telemetry_SubscribeRcStatusRequest, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeRcStatusCall {
    subscribeRcStatusRequests.append(request)
    defer { subscribeRcStatusCalls.removeFirst() }
    return subscribeRcStatusCalls.first!
  }

  var subscribeStatusTextRequests: [Mavsdk_Rpc_Telemetry_SubscribeStatusTextRequest] = []
  var subscribeStatusTextCalls: [Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeStatusTextCall] = []
  func subscribeStatusText(_ request: Mavsdk_Rpc_Telemetry_SubscribeStatusTextRequest, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeStatusTextCall {
    subscribeStatusTextRequests.append(request)
    defer { subscribeStatusTextCalls.removeFirst() }
    return subscribeStatusTextCalls.first!
  }

}

/// To build a server, implement a class that conforms to this protocol.
/// If one of the methods returning `ServerStatus?` returns nil,
/// it is expected that you have already returned a status to the client by means of `session.close`.
internal protocol Mavsdk_Rpc_Telemetry_TelemetryServiceProvider: ServiceProvider {
  func subscribePosition(request: Mavsdk_Rpc_Telemetry_SubscribePositionRequest, session: Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribePositionSession) throws -> ServerStatus?
  func subscribeHome(request: Mavsdk_Rpc_Telemetry_SubscribeHomeRequest, session: Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeHomeSession) throws -> ServerStatus?
  func subscribeInAir(request: Mavsdk_Rpc_Telemetry_SubscribeInAirRequest, session: Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeInAirSession) throws -> ServerStatus?
  func subscribeArmed(request: Mavsdk_Rpc_Telemetry_SubscribeArmedRequest, session: Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeArmedSession) throws -> ServerStatus?
  func subscribeAttitudeQuaternion(request: Mavsdk_Rpc_Telemetry_SubscribeAttitudeQuaternionRequest, session: Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeQuaternionSession) throws -> ServerStatus?
  func subscribeAttitudeEuler(request: Mavsdk_Rpc_Telemetry_SubscribeAttitudeEulerRequest, session: Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeEulerSession) throws -> ServerStatus?
  func subscribeCameraAttitudeQuaternion(request: Mavsdk_Rpc_Telemetry_SubscribeCameraAttitudeQuaternionRequest, session: Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeQuaternionSession) throws -> ServerStatus?
  func subscribeCameraAttitudeEuler(request: Mavsdk_Rpc_Telemetry_SubscribeCameraAttitudeEulerRequest, session: Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeEulerSession) throws -> ServerStatus?
  func subscribeGroundSpeedNed(request: Mavsdk_Rpc_Telemetry_SubscribeGroundSpeedNedRequest, session: Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeGroundSpeedNedSession) throws -> ServerStatus?
  func subscribeGpsInfo(request: Mavsdk_Rpc_Telemetry_SubscribeGpsInfoRequest, session: Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeGpsInfoSession) throws -> ServerStatus?
  func subscribeBattery(request: Mavsdk_Rpc_Telemetry_SubscribeBatteryRequest, session: Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeBatterySession) throws -> ServerStatus?
  func subscribeFlightMode(request: Mavsdk_Rpc_Telemetry_SubscribeFlightModeRequest, session: Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeFlightModeSession) throws -> ServerStatus?
  func subscribeHealth(request: Mavsdk_Rpc_Telemetry_SubscribeHealthRequest, session: Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeHealthSession) throws -> ServerStatus?
  func subscribeRcStatus(request: Mavsdk_Rpc_Telemetry_SubscribeRcStatusRequest, session: Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeRcStatusSession) throws -> ServerStatus?
  func subscribeStatusText(request: Mavsdk_Rpc_Telemetry_SubscribeStatusTextRequest, session: Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeStatusTextSession) throws -> ServerStatus?
}

extension Mavsdk_Rpc_Telemetry_TelemetryServiceProvider {
  internal var serviceName: String { return "mavsdk.rpc.telemetry.TelemetryService" }

  /// Determines and calls the appropriate request handler, depending on the request's method.
  /// Throws `HandleMethodError.unknownMethod` for methods not handled by this service.
  internal func handleMethod(_ method: String, handler: Handler) throws -> ServerStatus? {
    switch method {
    case "/mavsdk.rpc.telemetry.TelemetryService/SubscribePosition":
      return try Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribePositionSessionBase(
        handler: handler,
        providerBlock: { try self.subscribePosition(request: $0, session: $1 as! Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribePositionSessionBase) })
          .run()
    case "/mavsdk.rpc.telemetry.TelemetryService/SubscribeHome":
      return try Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeHomeSessionBase(
        handler: handler,
        providerBlock: { try self.subscribeHome(request: $0, session: $1 as! Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeHomeSessionBase) })
          .run()
    case "/mavsdk.rpc.telemetry.TelemetryService/SubscribeInAir":
      return try Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeInAirSessionBase(
        handler: handler,
        providerBlock: { try self.subscribeInAir(request: $0, session: $1 as! Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeInAirSessionBase) })
          .run()
    case "/mavsdk.rpc.telemetry.TelemetryService/SubscribeArmed":
      return try Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeArmedSessionBase(
        handler: handler,
        providerBlock: { try self.subscribeArmed(request: $0, session: $1 as! Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeArmedSessionBase) })
          .run()
    case "/mavsdk.rpc.telemetry.TelemetryService/SubscribeAttitudeQuaternion":
      return try Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeQuaternionSessionBase(
        handler: handler,
        providerBlock: { try self.subscribeAttitudeQuaternion(request: $0, session: $1 as! Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeQuaternionSessionBase) })
          .run()
    case "/mavsdk.rpc.telemetry.TelemetryService/SubscribeAttitudeEuler":
      return try Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeEulerSessionBase(
        handler: handler,
        providerBlock: { try self.subscribeAttitudeEuler(request: $0, session: $1 as! Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeEulerSessionBase) })
          .run()
    case "/mavsdk.rpc.telemetry.TelemetryService/SubscribeCameraAttitudeQuaternion":
      return try Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeQuaternionSessionBase(
        handler: handler,
        providerBlock: { try self.subscribeCameraAttitudeQuaternion(request: $0, session: $1 as! Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeQuaternionSessionBase) })
          .run()
    case "/mavsdk.rpc.telemetry.TelemetryService/SubscribeCameraAttitudeEuler":
      return try Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeEulerSessionBase(
        handler: handler,
        providerBlock: { try self.subscribeCameraAttitudeEuler(request: $0, session: $1 as! Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeEulerSessionBase) })
          .run()
    case "/mavsdk.rpc.telemetry.TelemetryService/SubscribeGroundSpeedNed":
      return try Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeGroundSpeedNedSessionBase(
        handler: handler,
        providerBlock: { try self.subscribeGroundSpeedNed(request: $0, session: $1 as! Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeGroundSpeedNedSessionBase) })
          .run()
    case "/mavsdk.rpc.telemetry.TelemetryService/SubscribeGpsInfo":
      return try Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeGpsInfoSessionBase(
        handler: handler,
        providerBlock: { try self.subscribeGpsInfo(request: $0, session: $1 as! Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeGpsInfoSessionBase) })
          .run()
    case "/mavsdk.rpc.telemetry.TelemetryService/SubscribeBattery":
      return try Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeBatterySessionBase(
        handler: handler,
        providerBlock: { try self.subscribeBattery(request: $0, session: $1 as! Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeBatterySessionBase) })
          .run()
    case "/mavsdk.rpc.telemetry.TelemetryService/SubscribeFlightMode":
      return try Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeFlightModeSessionBase(
        handler: handler,
        providerBlock: { try self.subscribeFlightMode(request: $0, session: $1 as! Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeFlightModeSessionBase) })
          .run()
    case "/mavsdk.rpc.telemetry.TelemetryService/SubscribeHealth":
      return try Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeHealthSessionBase(
        handler: handler,
        providerBlock: { try self.subscribeHealth(request: $0, session: $1 as! Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeHealthSessionBase) })
          .run()
    case "/mavsdk.rpc.telemetry.TelemetryService/SubscribeRcStatus":
      return try Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeRcStatusSessionBase(
        handler: handler,
        providerBlock: { try self.subscribeRcStatus(request: $0, session: $1 as! Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeRcStatusSessionBase) })
          .run()
    case "/mavsdk.rpc.telemetry.TelemetryService/SubscribeStatusText":
      return try Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeStatusTextSessionBase(
        handler: handler,
        providerBlock: { try self.subscribeStatusText(request: $0, session: $1 as! Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeStatusTextSessionBase) })
          .run()
    default:
      throw HandleMethodError.unknownMethod
    }
  }
}

internal protocol Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribePositionSession: ServerSessionServerStreaming {
  /// Send a message to the stream. Nonblocking.
  func send(_ message: Mavsdk_Rpc_Telemetry_PositionResponse, completion: @escaping (Error?) -> Void) throws
  /// Do not call this directly, call `send()` in the protocol extension below instead.
  func _send(_ message: Mavsdk_Rpc_Telemetry_PositionResponse, timeout: DispatchTime) throws

  /// Close the connection and send the status. Non-blocking.
  /// This method should be called if and only if your request handler returns a nil value instead of a server status;
  /// otherwise SwiftGRPC will take care of sending the status for you.
  func close(withStatus status: ServerStatus, completion: (() -> Void)?) throws
}

internal extension Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribePositionSession {
  /// Send a message to the stream and wait for the send operation to finish. Blocking.
  func send(_ message: Mavsdk_Rpc_Telemetry_PositionResponse, timeout: DispatchTime = .distantFuture) throws { try self._send(message, timeout: timeout) }
}

fileprivate final class Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribePositionSessionBase: ServerSessionServerStreamingBase<Mavsdk_Rpc_Telemetry_SubscribePositionRequest, Mavsdk_Rpc_Telemetry_PositionResponse>, Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribePositionSession {}

class Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribePositionSessionTestStub: ServerSessionServerStreamingTestStub<Mavsdk_Rpc_Telemetry_PositionResponse>, Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribePositionSession {}

internal protocol Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeHomeSession: ServerSessionServerStreaming {
  /// Send a message to the stream. Nonblocking.
  func send(_ message: Mavsdk_Rpc_Telemetry_HomeResponse, completion: @escaping (Error?) -> Void) throws
  /// Do not call this directly, call `send()` in the protocol extension below instead.
  func _send(_ message: Mavsdk_Rpc_Telemetry_HomeResponse, timeout: DispatchTime) throws

  /// Close the connection and send the status. Non-blocking.
  /// This method should be called if and only if your request handler returns a nil value instead of a server status;
  /// otherwise SwiftGRPC will take care of sending the status for you.
  func close(withStatus status: ServerStatus, completion: (() -> Void)?) throws
}

internal extension Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeHomeSession {
  /// Send a message to the stream and wait for the send operation to finish. Blocking.
  func send(_ message: Mavsdk_Rpc_Telemetry_HomeResponse, timeout: DispatchTime = .distantFuture) throws { try self._send(message, timeout: timeout) }
}

fileprivate final class Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeHomeSessionBase: ServerSessionServerStreamingBase<Mavsdk_Rpc_Telemetry_SubscribeHomeRequest, Mavsdk_Rpc_Telemetry_HomeResponse>, Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeHomeSession {}

class Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeHomeSessionTestStub: ServerSessionServerStreamingTestStub<Mavsdk_Rpc_Telemetry_HomeResponse>, Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeHomeSession {}

internal protocol Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeInAirSession: ServerSessionServerStreaming {
  /// Send a message to the stream. Nonblocking.
  func send(_ message: Mavsdk_Rpc_Telemetry_InAirResponse, completion: @escaping (Error?) -> Void) throws
  /// Do not call this directly, call `send()` in the protocol extension below instead.
  func _send(_ message: Mavsdk_Rpc_Telemetry_InAirResponse, timeout: DispatchTime) throws

  /// Close the connection and send the status. Non-blocking.
  /// This method should be called if and only if your request handler returns a nil value instead of a server status;
  /// otherwise SwiftGRPC will take care of sending the status for you.
  func close(withStatus status: ServerStatus, completion: (() -> Void)?) throws
}

internal extension Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeInAirSession {
  /// Send a message to the stream and wait for the send operation to finish. Blocking.
  func send(_ message: Mavsdk_Rpc_Telemetry_InAirResponse, timeout: DispatchTime = .distantFuture) throws { try self._send(message, timeout: timeout) }
}

fileprivate final class Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeInAirSessionBase: ServerSessionServerStreamingBase<Mavsdk_Rpc_Telemetry_SubscribeInAirRequest, Mavsdk_Rpc_Telemetry_InAirResponse>, Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeInAirSession {}

class Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeInAirSessionTestStub: ServerSessionServerStreamingTestStub<Mavsdk_Rpc_Telemetry_InAirResponse>, Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeInAirSession {}

internal protocol Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeArmedSession: ServerSessionServerStreaming {
  /// Send a message to the stream. Nonblocking.
  func send(_ message: Mavsdk_Rpc_Telemetry_ArmedResponse, completion: @escaping (Error?) -> Void) throws
  /// Do not call this directly, call `send()` in the protocol extension below instead.
  func _send(_ message: Mavsdk_Rpc_Telemetry_ArmedResponse, timeout: DispatchTime) throws

  /// Close the connection and send the status. Non-blocking.
  /// This method should be called if and only if your request handler returns a nil value instead of a server status;
  /// otherwise SwiftGRPC will take care of sending the status for you.
  func close(withStatus status: ServerStatus, completion: (() -> Void)?) throws
}

internal extension Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeArmedSession {
  /// Send a message to the stream and wait for the send operation to finish. Blocking.
  func send(_ message: Mavsdk_Rpc_Telemetry_ArmedResponse, timeout: DispatchTime = .distantFuture) throws { try self._send(message, timeout: timeout) }
}

fileprivate final class Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeArmedSessionBase: ServerSessionServerStreamingBase<Mavsdk_Rpc_Telemetry_SubscribeArmedRequest, Mavsdk_Rpc_Telemetry_ArmedResponse>, Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeArmedSession {}

class Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeArmedSessionTestStub: ServerSessionServerStreamingTestStub<Mavsdk_Rpc_Telemetry_ArmedResponse>, Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeArmedSession {}

internal protocol Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeQuaternionSession: ServerSessionServerStreaming {
  /// Send a message to the stream. Nonblocking.
  func send(_ message: Mavsdk_Rpc_Telemetry_AttitudeQuaternionResponse, completion: @escaping (Error?) -> Void) throws
  /// Do not call this directly, call `send()` in the protocol extension below instead.
  func _send(_ message: Mavsdk_Rpc_Telemetry_AttitudeQuaternionResponse, timeout: DispatchTime) throws

  /// Close the connection and send the status. Non-blocking.
  /// This method should be called if and only if your request handler returns a nil value instead of a server status;
  /// otherwise SwiftGRPC will take care of sending the status for you.
  func close(withStatus status: ServerStatus, completion: (() -> Void)?) throws
}

internal extension Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeQuaternionSession {
  /// Send a message to the stream and wait for the send operation to finish. Blocking.
  func send(_ message: Mavsdk_Rpc_Telemetry_AttitudeQuaternionResponse, timeout: DispatchTime = .distantFuture) throws { try self._send(message, timeout: timeout) }
}

fileprivate final class Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeQuaternionSessionBase: ServerSessionServerStreamingBase<Mavsdk_Rpc_Telemetry_SubscribeAttitudeQuaternionRequest, Mavsdk_Rpc_Telemetry_AttitudeQuaternionResponse>, Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeQuaternionSession {}

class Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeQuaternionSessionTestStub: ServerSessionServerStreamingTestStub<Mavsdk_Rpc_Telemetry_AttitudeQuaternionResponse>, Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeQuaternionSession {}

internal protocol Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeEulerSession: ServerSessionServerStreaming {
  /// Send a message to the stream. Nonblocking.
  func send(_ message: Mavsdk_Rpc_Telemetry_AttitudeEulerResponse, completion: @escaping (Error?) -> Void) throws
  /// Do not call this directly, call `send()` in the protocol extension below instead.
  func _send(_ message: Mavsdk_Rpc_Telemetry_AttitudeEulerResponse, timeout: DispatchTime) throws

  /// Close the connection and send the status. Non-blocking.
  /// This method should be called if and only if your request handler returns a nil value instead of a server status;
  /// otherwise SwiftGRPC will take care of sending the status for you.
  func close(withStatus status: ServerStatus, completion: (() -> Void)?) throws
}

internal extension Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeEulerSession {
  /// Send a message to the stream and wait for the send operation to finish. Blocking.
  func send(_ message: Mavsdk_Rpc_Telemetry_AttitudeEulerResponse, timeout: DispatchTime = .distantFuture) throws { try self._send(message, timeout: timeout) }
}

fileprivate final class Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeEulerSessionBase: ServerSessionServerStreamingBase<Mavsdk_Rpc_Telemetry_SubscribeAttitudeEulerRequest, Mavsdk_Rpc_Telemetry_AttitudeEulerResponse>, Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeEulerSession {}

class Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeEulerSessionTestStub: ServerSessionServerStreamingTestStub<Mavsdk_Rpc_Telemetry_AttitudeEulerResponse>, Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeAttitudeEulerSession {}

internal protocol Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeQuaternionSession: ServerSessionServerStreaming {
  /// Send a message to the stream. Nonblocking.
  func send(_ message: Mavsdk_Rpc_Telemetry_CameraAttitudeQuaternionResponse, completion: @escaping (Error?) -> Void) throws
  /// Do not call this directly, call `send()` in the protocol extension below instead.
  func _send(_ message: Mavsdk_Rpc_Telemetry_CameraAttitudeQuaternionResponse, timeout: DispatchTime) throws

  /// Close the connection and send the status. Non-blocking.
  /// This method should be called if and only if your request handler returns a nil value instead of a server status;
  /// otherwise SwiftGRPC will take care of sending the status for you.
  func close(withStatus status: ServerStatus, completion: (() -> Void)?) throws
}

internal extension Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeQuaternionSession {
  /// Send a message to the stream and wait for the send operation to finish. Blocking.
  func send(_ message: Mavsdk_Rpc_Telemetry_CameraAttitudeQuaternionResponse, timeout: DispatchTime = .distantFuture) throws { try self._send(message, timeout: timeout) }
}

fileprivate final class Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeQuaternionSessionBase: ServerSessionServerStreamingBase<Mavsdk_Rpc_Telemetry_SubscribeCameraAttitudeQuaternionRequest, Mavsdk_Rpc_Telemetry_CameraAttitudeQuaternionResponse>, Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeQuaternionSession {}

class Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeQuaternionSessionTestStub: ServerSessionServerStreamingTestStub<Mavsdk_Rpc_Telemetry_CameraAttitudeQuaternionResponse>, Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeQuaternionSession {}

internal protocol Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeEulerSession: ServerSessionServerStreaming {
  /// Send a message to the stream. Nonblocking.
  func send(_ message: Mavsdk_Rpc_Telemetry_CameraAttitudeEulerResponse, completion: @escaping (Error?) -> Void) throws
  /// Do not call this directly, call `send()` in the protocol extension below instead.
  func _send(_ message: Mavsdk_Rpc_Telemetry_CameraAttitudeEulerResponse, timeout: DispatchTime) throws

  /// Close the connection and send the status. Non-blocking.
  /// This method should be called if and only if your request handler returns a nil value instead of a server status;
  /// otherwise SwiftGRPC will take care of sending the status for you.
  func close(withStatus status: ServerStatus, completion: (() -> Void)?) throws
}

internal extension Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeEulerSession {
  /// Send a message to the stream and wait for the send operation to finish. Blocking.
  func send(_ message: Mavsdk_Rpc_Telemetry_CameraAttitudeEulerResponse, timeout: DispatchTime = .distantFuture) throws { try self._send(message, timeout: timeout) }
}

fileprivate final class Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeEulerSessionBase: ServerSessionServerStreamingBase<Mavsdk_Rpc_Telemetry_SubscribeCameraAttitudeEulerRequest, Mavsdk_Rpc_Telemetry_CameraAttitudeEulerResponse>, Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeEulerSession {}

class Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeEulerSessionTestStub: ServerSessionServerStreamingTestStub<Mavsdk_Rpc_Telemetry_CameraAttitudeEulerResponse>, Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeCameraAttitudeEulerSession {}

internal protocol Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeGroundSpeedNedSession: ServerSessionServerStreaming {
  /// Send a message to the stream. Nonblocking.
  func send(_ message: Mavsdk_Rpc_Telemetry_GroundSpeedNedResponse, completion: @escaping (Error?) -> Void) throws
  /// Do not call this directly, call `send()` in the protocol extension below instead.
  func _send(_ message: Mavsdk_Rpc_Telemetry_GroundSpeedNedResponse, timeout: DispatchTime) throws

  /// Close the connection and send the status. Non-blocking.
  /// This method should be called if and only if your request handler returns a nil value instead of a server status;
  /// otherwise SwiftGRPC will take care of sending the status for you.
  func close(withStatus status: ServerStatus, completion: (() -> Void)?) throws
}

internal extension Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeGroundSpeedNedSession {
  /// Send a message to the stream and wait for the send operation to finish. Blocking.
  func send(_ message: Mavsdk_Rpc_Telemetry_GroundSpeedNedResponse, timeout: DispatchTime = .distantFuture) throws { try self._send(message, timeout: timeout) }
}

fileprivate final class Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeGroundSpeedNedSessionBase: ServerSessionServerStreamingBase<Mavsdk_Rpc_Telemetry_SubscribeGroundSpeedNedRequest, Mavsdk_Rpc_Telemetry_GroundSpeedNedResponse>, Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeGroundSpeedNedSession {}

class Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeGroundSpeedNedSessionTestStub: ServerSessionServerStreamingTestStub<Mavsdk_Rpc_Telemetry_GroundSpeedNedResponse>, Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeGroundSpeedNedSession {}

internal protocol Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeGpsInfoSession: ServerSessionServerStreaming {
  /// Send a message to the stream. Nonblocking.
  func send(_ message: Mavsdk_Rpc_Telemetry_GpsInfoResponse, completion: @escaping (Error?) -> Void) throws
  /// Do not call this directly, call `send()` in the protocol extension below instead.
  func _send(_ message: Mavsdk_Rpc_Telemetry_GpsInfoResponse, timeout: DispatchTime) throws

  /// Close the connection and send the status. Non-blocking.
  /// This method should be called if and only if your request handler returns a nil value instead of a server status;
  /// otherwise SwiftGRPC will take care of sending the status for you.
  func close(withStatus status: ServerStatus, completion: (() -> Void)?) throws
}

internal extension Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeGpsInfoSession {
  /// Send a message to the stream and wait for the send operation to finish. Blocking.
  func send(_ message: Mavsdk_Rpc_Telemetry_GpsInfoResponse, timeout: DispatchTime = .distantFuture) throws { try self._send(message, timeout: timeout) }
}

fileprivate final class Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeGpsInfoSessionBase: ServerSessionServerStreamingBase<Mavsdk_Rpc_Telemetry_SubscribeGpsInfoRequest, Mavsdk_Rpc_Telemetry_GpsInfoResponse>, Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeGpsInfoSession {}

class Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeGpsInfoSessionTestStub: ServerSessionServerStreamingTestStub<Mavsdk_Rpc_Telemetry_GpsInfoResponse>, Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeGpsInfoSession {}

internal protocol Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeBatterySession: ServerSessionServerStreaming {
  /// Send a message to the stream. Nonblocking.
  func send(_ message: Mavsdk_Rpc_Telemetry_BatteryResponse, completion: @escaping (Error?) -> Void) throws
  /// Do not call this directly, call `send()` in the protocol extension below instead.
  func _send(_ message: Mavsdk_Rpc_Telemetry_BatteryResponse, timeout: DispatchTime) throws

  /// Close the connection and send the status. Non-blocking.
  /// This method should be called if and only if your request handler returns a nil value instead of a server status;
  /// otherwise SwiftGRPC will take care of sending the status for you.
  func close(withStatus status: ServerStatus, completion: (() -> Void)?) throws
}

internal extension Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeBatterySession {
  /// Send a message to the stream and wait for the send operation to finish. Blocking.
  func send(_ message: Mavsdk_Rpc_Telemetry_BatteryResponse, timeout: DispatchTime = .distantFuture) throws { try self._send(message, timeout: timeout) }
}

fileprivate final class Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeBatterySessionBase: ServerSessionServerStreamingBase<Mavsdk_Rpc_Telemetry_SubscribeBatteryRequest, Mavsdk_Rpc_Telemetry_BatteryResponse>, Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeBatterySession {}

class Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeBatterySessionTestStub: ServerSessionServerStreamingTestStub<Mavsdk_Rpc_Telemetry_BatteryResponse>, Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeBatterySession {}

internal protocol Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeFlightModeSession: ServerSessionServerStreaming {
  /// Send a message to the stream. Nonblocking.
  func send(_ message: Mavsdk_Rpc_Telemetry_FlightModeResponse, completion: @escaping (Error?) -> Void) throws
  /// Do not call this directly, call `send()` in the protocol extension below instead.
  func _send(_ message: Mavsdk_Rpc_Telemetry_FlightModeResponse, timeout: DispatchTime) throws

  /// Close the connection and send the status. Non-blocking.
  /// This method should be called if and only if your request handler returns a nil value instead of a server status;
  /// otherwise SwiftGRPC will take care of sending the status for you.
  func close(withStatus status: ServerStatus, completion: (() -> Void)?) throws
}

internal extension Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeFlightModeSession {
  /// Send a message to the stream and wait for the send operation to finish. Blocking.
  func send(_ message: Mavsdk_Rpc_Telemetry_FlightModeResponse, timeout: DispatchTime = .distantFuture) throws { try self._send(message, timeout: timeout) }
}

fileprivate final class Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeFlightModeSessionBase: ServerSessionServerStreamingBase<Mavsdk_Rpc_Telemetry_SubscribeFlightModeRequest, Mavsdk_Rpc_Telemetry_FlightModeResponse>, Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeFlightModeSession {}

class Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeFlightModeSessionTestStub: ServerSessionServerStreamingTestStub<Mavsdk_Rpc_Telemetry_FlightModeResponse>, Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeFlightModeSession {}

internal protocol Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeHealthSession: ServerSessionServerStreaming {
  /// Send a message to the stream. Nonblocking.
  func send(_ message: Mavsdk_Rpc_Telemetry_HealthResponse, completion: @escaping (Error?) -> Void) throws
  /// Do not call this directly, call `send()` in the protocol extension below instead.
  func _send(_ message: Mavsdk_Rpc_Telemetry_HealthResponse, timeout: DispatchTime) throws

  /// Close the connection and send the status. Non-blocking.
  /// This method should be called if and only if your request handler returns a nil value instead of a server status;
  /// otherwise SwiftGRPC will take care of sending the status for you.
  func close(withStatus status: ServerStatus, completion: (() -> Void)?) throws
}

internal extension Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeHealthSession {
  /// Send a message to the stream and wait for the send operation to finish. Blocking.
  func send(_ message: Mavsdk_Rpc_Telemetry_HealthResponse, timeout: DispatchTime = .distantFuture) throws { try self._send(message, timeout: timeout) }
}

fileprivate final class Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeHealthSessionBase: ServerSessionServerStreamingBase<Mavsdk_Rpc_Telemetry_SubscribeHealthRequest, Mavsdk_Rpc_Telemetry_HealthResponse>, Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeHealthSession {}

class Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeHealthSessionTestStub: ServerSessionServerStreamingTestStub<Mavsdk_Rpc_Telemetry_HealthResponse>, Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeHealthSession {}

internal protocol Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeRcStatusSession: ServerSessionServerStreaming {
  /// Send a message to the stream. Nonblocking.
  func send(_ message: Mavsdk_Rpc_Telemetry_RcStatusResponse, completion: @escaping (Error?) -> Void) throws
  /// Do not call this directly, call `send()` in the protocol extension below instead.
  func _send(_ message: Mavsdk_Rpc_Telemetry_RcStatusResponse, timeout: DispatchTime) throws

  /// Close the connection and send the status. Non-blocking.
  /// This method should be called if and only if your request handler returns a nil value instead of a server status;
  /// otherwise SwiftGRPC will take care of sending the status for you.
  func close(withStatus status: ServerStatus, completion: (() -> Void)?) throws
}

internal extension Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeRcStatusSession {
  /// Send a message to the stream and wait for the send operation to finish. Blocking.
  func send(_ message: Mavsdk_Rpc_Telemetry_RcStatusResponse, timeout: DispatchTime = .distantFuture) throws { try self._send(message, timeout: timeout) }
}

fileprivate final class Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeRcStatusSessionBase: ServerSessionServerStreamingBase<Mavsdk_Rpc_Telemetry_SubscribeRcStatusRequest, Mavsdk_Rpc_Telemetry_RcStatusResponse>, Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeRcStatusSession {}

class Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeRcStatusSessionTestStub: ServerSessionServerStreamingTestStub<Mavsdk_Rpc_Telemetry_RcStatusResponse>, Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeRcStatusSession {}

internal protocol Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeStatusTextSession: ServerSessionServerStreaming {
  /// Send a message to the stream. Nonblocking.
  func send(_ message: Mavsdk_Rpc_Telemetry_StatusTextResponse, completion: @escaping (Error?) -> Void) throws
  /// Do not call this directly, call `send()` in the protocol extension below instead.
  func _send(_ message: Mavsdk_Rpc_Telemetry_StatusTextResponse, timeout: DispatchTime) throws

  /// Close the connection and send the status. Non-blocking.
  /// This method should be called if and only if your request handler returns a nil value instead of a server status;
  /// otherwise SwiftGRPC will take care of sending the status for you.
  func close(withStatus status: ServerStatus, completion: (() -> Void)?) throws
}

internal extension Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeStatusTextSession {
  /// Send a message to the stream and wait for the send operation to finish. Blocking.
  func send(_ message: Mavsdk_Rpc_Telemetry_StatusTextResponse, timeout: DispatchTime = .distantFuture) throws { try self._send(message, timeout: timeout) }
}

fileprivate final class Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeStatusTextSessionBase: ServerSessionServerStreamingBase<Mavsdk_Rpc_Telemetry_SubscribeStatusTextRequest, Mavsdk_Rpc_Telemetry_StatusTextResponse>, Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeStatusTextSession {}

class Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeStatusTextSessionTestStub: ServerSessionServerStreamingTestStub<Mavsdk_Rpc_Telemetry_StatusTextResponse>, Mavsdk_Rpc_Telemetry_TelemetryServiceSubscribeStatusTextSession {}

