// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: passthrough.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Mavsdk_Rpc_Passthrough_SendMessageRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var mavlinkMessage: Mavsdk_Rpc_Passthrough_MavlinkMessage {
    get {return _storage._mavlinkMessage ?? Mavsdk_Rpc_Passthrough_MavlinkMessage()}
    set {_uniqueStorage()._mavlinkMessage = newValue}
  }
  /// Returns true if `mavlinkMessage` has been explicitly set.
  var hasMavlinkMessage: Bool {return _storage._mavlinkMessage != nil}
  /// Clears the value of `mavlinkMessage`. Subsequent reads from it will return its default value.
  mutating func clearMavlinkMessage() {_uniqueStorage()._mavlinkMessage = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Mavsdk_Rpc_Passthrough_SendMessageResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var passthroughResult: Mavsdk_Rpc_Passthrough_PassthroughResult {
    get {return _storage._passthroughResult ?? Mavsdk_Rpc_Passthrough_PassthroughResult()}
    set {_uniqueStorage()._passthroughResult = newValue}
  }
  /// Returns true if `passthroughResult` has been explicitly set.
  var hasPassthroughResult: Bool {return _storage._passthroughResult != nil}
  /// Clears the value of `passthroughResult`. Subsequent reads from it will return its default value.
  mutating func clearPassthroughResult() {_uniqueStorage()._passthroughResult = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Mavsdk_Rpc_Passthrough_GetOurSysIdRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Mavsdk_Rpc_Passthrough_GetOurSysIdResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sysid: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Mavsdk_Rpc_Passthrough_GetOurCompIdRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Mavsdk_Rpc_Passthrough_GetOurCompIdResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var compid: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Mavsdk_Rpc_Passthrough_GetTargetSysIdRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Mavsdk_Rpc_Passthrough_GetTargetSysIdResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var targetSysid: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Mavsdk_Rpc_Passthrough_GetTargetCompIdRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Mavsdk_Rpc_Passthrough_GetTargetCompIdResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var targetCompid: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Mavsdk_Rpc_Passthrough_SendCommandIntRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var commandInt: Mavsdk_Rpc_Passthrough_CommandInt {
    get {return _storage._commandInt ?? Mavsdk_Rpc_Passthrough_CommandInt()}
    set {_uniqueStorage()._commandInt = newValue}
  }
  /// Returns true if `commandInt` has been explicitly set.
  var hasCommandInt: Bool {return _storage._commandInt != nil}
  /// Clears the value of `commandInt`. Subsequent reads from it will return its default value.
  mutating func clearCommandInt() {_uniqueStorage()._commandInt = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Mavsdk_Rpc_Passthrough_SendCommandIntResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var passthroughResult: Mavsdk_Rpc_Passthrough_PassthroughResult {
    get {return _storage._passthroughResult ?? Mavsdk_Rpc_Passthrough_PassthroughResult()}
    set {_uniqueStorage()._passthroughResult = newValue}
  }
  /// Returns true if `passthroughResult` has been explicitly set.
  var hasPassthroughResult: Bool {return _storage._passthroughResult != nil}
  /// Clears the value of `passthroughResult`. Subsequent reads from it will return its default value.
  mutating func clearPassthroughResult() {_uniqueStorage()._passthroughResult = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Mavsdk_Rpc_Passthrough_SendCommandLongRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var commandLong: Mavsdk_Rpc_Passthrough_CommandLong {
    get {return _storage._commandLong ?? Mavsdk_Rpc_Passthrough_CommandLong()}
    set {_uniqueStorage()._commandLong = newValue}
  }
  /// Returns true if `commandLong` has been explicitly set.
  var hasCommandLong: Bool {return _storage._commandLong != nil}
  /// Clears the value of `commandLong`. Subsequent reads from it will return its default value.
  mutating func clearCommandLong() {_uniqueStorage()._commandLong = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Mavsdk_Rpc_Passthrough_SendCommandLongResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var passthroughResult: Mavsdk_Rpc_Passthrough_PassthroughResult {
    get {return _storage._passthroughResult ?? Mavsdk_Rpc_Passthrough_PassthroughResult()}
    set {_uniqueStorage()._passthroughResult = newValue}
  }
  /// Returns true if `passthroughResult` has been explicitly set.
  var hasPassthroughResult: Bool {return _storage._passthroughResult != nil}
  /// Clears the value of `passthroughResult`. Subsequent reads from it will return its default value.
  mutating func clearPassthroughResult() {_uniqueStorage()._passthroughResult = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Mavsdk_Rpc_Passthrough_MavlinkMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var checksum: UInt32 = 0

  var magic: UInt32 = 0

  var len: UInt32 = 0

  var incompatFlags: UInt32 = 0

  var compatFlags: UInt32 = 0

  var seq: UInt32 = 0

  var sysid: UInt32 = 0

  var compid: UInt32 = 0

  var msgid: UInt32 = 0

  var payload64: [UInt64] = []

  var ck: [UInt32] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Mavsdk_Rpc_Passthrough_CommandInt {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var targetSystemID: UInt32 {
    get {return _storage._targetSystemID}
    set {_uniqueStorage()._targetSystemID = newValue}
  }

  var targetComponentID: UInt32 {
    get {return _storage._targetComponentID}
    set {_uniqueStorage()._targetComponentID = newValue}
  }

  var command: UInt64 {
    get {return _storage._command}
    set {_uniqueStorage()._command = newValue}
  }

  var current: Bool {
    get {return _storage._current}
    set {_uniqueStorage()._current = newValue}
  }

  var autocontinue: Bool {
    get {return _storage._autocontinue}
    set {_uniqueStorage()._autocontinue = newValue}
  }

  var params: Mavsdk_Rpc_Passthrough_ParamsInt {
    get {return _storage._params ?? Mavsdk_Rpc_Passthrough_ParamsInt()}
    set {_uniqueStorage()._params = newValue}
  }
  /// Returns true if `params` has been explicitly set.
  var hasParams: Bool {return _storage._params != nil}
  /// Clears the value of `params`. Subsequent reads from it will return its default value.
  mutating func clearParams() {_uniqueStorage()._params = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Mavsdk_Rpc_Passthrough_ParamsInt {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var param1: Float = 0

  var param2: Float = 0

  var param3: Float = 0

  var param4: Float = 0

  var x: Int32 = 0

  var y: Int32 = 0

  var z: Float = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Mavsdk_Rpc_Passthrough_CommandLong {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var targetSystemID: UInt32 {
    get {return _storage._targetSystemID}
    set {_uniqueStorage()._targetSystemID = newValue}
  }

  var targetComponentID: UInt32 {
    get {return _storage._targetComponentID}
    set {_uniqueStorage()._targetComponentID = newValue}
  }

  var command: UInt64 {
    get {return _storage._command}
    set {_uniqueStorage()._command = newValue}
  }

  var confirmation: UInt32 {
    get {return _storage._confirmation}
    set {_uniqueStorage()._confirmation = newValue}
  }

  var params: Mavsdk_Rpc_Passthrough_ParamsLong {
    get {return _storage._params ?? Mavsdk_Rpc_Passthrough_ParamsLong()}
    set {_uniqueStorage()._params = newValue}
  }
  /// Returns true if `params` has been explicitly set.
  var hasParams: Bool {return _storage._params != nil}
  /// Clears the value of `params`. Subsequent reads from it will return its default value.
  mutating func clearParams() {_uniqueStorage()._params = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Mavsdk_Rpc_Passthrough_ParamsLong {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var param1: Float = 0

  var param2: Float = 0

  var param3: Float = 0

  var param4: Float = 0

  var param5: Float = 0

  var param6: Float = 0

  var param7: Float = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Mavsdk_Rpc_Passthrough_PassthroughResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var result: Mavsdk_Rpc_Passthrough_PassthroughResult.Result = .unknown

  var resultStr: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Result: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case unknown // = 0
    case success // = 1
    case connectionError // = 2
    case UNRECOGNIZED(Int)

    init() {
      self = .unknown
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .success
      case 2: self = .connectionError
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .success: return 1
      case .connectionError: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

#if swift(>=4.2)

extension Mavsdk_Rpc_Passthrough_PassthroughResult.Result: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Mavsdk_Rpc_Passthrough_PassthroughResult.Result] = [
    .unknown,
    .success,
    .connectionError,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "mavsdk.rpc.passthrough"

extension Mavsdk_Rpc_Passthrough_SendMessageRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SendMessageRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "mavlink_message"),
  ]

  fileprivate class _StorageClass {
    var _mavlinkMessage: Mavsdk_Rpc_Passthrough_MavlinkMessage? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _mavlinkMessage = source._mavlinkMessage
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._mavlinkMessage)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._mavlinkMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Passthrough_SendMessageRequest, rhs: Mavsdk_Rpc_Passthrough_SendMessageRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._mavlinkMessage != rhs_storage._mavlinkMessage {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Passthrough_SendMessageResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SendMessageResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "passthrough_result"),
  ]

  fileprivate class _StorageClass {
    var _passthroughResult: Mavsdk_Rpc_Passthrough_PassthroughResult? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _passthroughResult = source._passthroughResult
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._passthroughResult)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._passthroughResult {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Passthrough_SendMessageResponse, rhs: Mavsdk_Rpc_Passthrough_SendMessageResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._passthroughResult != rhs_storage._passthroughResult {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Passthrough_GetOurSysIdRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetOurSysIdRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Passthrough_GetOurSysIdRequest, rhs: Mavsdk_Rpc_Passthrough_GetOurSysIdRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Passthrough_GetOurSysIdResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetOurSysIdResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sysid"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self.sysid)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.sysid != 0 {
      try visitor.visitSingularUInt32Field(value: self.sysid, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Passthrough_GetOurSysIdResponse, rhs: Mavsdk_Rpc_Passthrough_GetOurSysIdResponse) -> Bool {
    if lhs.sysid != rhs.sysid {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Passthrough_GetOurCompIdRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetOurCompIdRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Passthrough_GetOurCompIdRequest, rhs: Mavsdk_Rpc_Passthrough_GetOurCompIdRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Passthrough_GetOurCompIdResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetOurCompIdResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "compid"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self.compid)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.compid != 0 {
      try visitor.visitSingularUInt32Field(value: self.compid, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Passthrough_GetOurCompIdResponse, rhs: Mavsdk_Rpc_Passthrough_GetOurCompIdResponse) -> Bool {
    if lhs.compid != rhs.compid {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Passthrough_GetTargetSysIdRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetTargetSysIdRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Passthrough_GetTargetSysIdRequest, rhs: Mavsdk_Rpc_Passthrough_GetTargetSysIdRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Passthrough_GetTargetSysIdResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetTargetSysIdResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "target_sysid"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self.targetSysid)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.targetSysid != 0 {
      try visitor.visitSingularUInt32Field(value: self.targetSysid, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Passthrough_GetTargetSysIdResponse, rhs: Mavsdk_Rpc_Passthrough_GetTargetSysIdResponse) -> Bool {
    if lhs.targetSysid != rhs.targetSysid {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Passthrough_GetTargetCompIdRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetTargetCompIdRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Passthrough_GetTargetCompIdRequest, rhs: Mavsdk_Rpc_Passthrough_GetTargetCompIdRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Passthrough_GetTargetCompIdResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetTargetCompIdResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "target_compid"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self.targetCompid)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.targetCompid != 0 {
      try visitor.visitSingularUInt32Field(value: self.targetCompid, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Passthrough_GetTargetCompIdResponse, rhs: Mavsdk_Rpc_Passthrough_GetTargetCompIdResponse) -> Bool {
    if lhs.targetCompid != rhs.targetCompid {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Passthrough_SendCommandIntRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SendCommandIntRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "command_int"),
  ]

  fileprivate class _StorageClass {
    var _commandInt: Mavsdk_Rpc_Passthrough_CommandInt? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _commandInt = source._commandInt
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._commandInt)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._commandInt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Passthrough_SendCommandIntRequest, rhs: Mavsdk_Rpc_Passthrough_SendCommandIntRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._commandInt != rhs_storage._commandInt {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Passthrough_SendCommandIntResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SendCommandIntResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "passthrough_result"),
  ]

  fileprivate class _StorageClass {
    var _passthroughResult: Mavsdk_Rpc_Passthrough_PassthroughResult? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _passthroughResult = source._passthroughResult
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._passthroughResult)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._passthroughResult {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Passthrough_SendCommandIntResponse, rhs: Mavsdk_Rpc_Passthrough_SendCommandIntResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._passthroughResult != rhs_storage._passthroughResult {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Passthrough_SendCommandLongRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SendCommandLongRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "command_long"),
  ]

  fileprivate class _StorageClass {
    var _commandLong: Mavsdk_Rpc_Passthrough_CommandLong? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _commandLong = source._commandLong
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._commandLong)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._commandLong {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Passthrough_SendCommandLongRequest, rhs: Mavsdk_Rpc_Passthrough_SendCommandLongRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._commandLong != rhs_storage._commandLong {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Passthrough_SendCommandLongResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SendCommandLongResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "passthrough_result"),
  ]

  fileprivate class _StorageClass {
    var _passthroughResult: Mavsdk_Rpc_Passthrough_PassthroughResult? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _passthroughResult = source._passthroughResult
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._passthroughResult)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._passthroughResult {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Passthrough_SendCommandLongResponse, rhs: Mavsdk_Rpc_Passthrough_SendCommandLongResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._passthroughResult != rhs_storage._passthroughResult {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Passthrough_MavlinkMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MavlinkMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "checksum"),
    2: .same(proto: "magic"),
    3: .same(proto: "len"),
    4: .standard(proto: "incompat_flags"),
    5: .standard(proto: "compat_flags"),
    6: .same(proto: "seq"),
    7: .same(proto: "sysid"),
    8: .same(proto: "compid"),
    9: .same(proto: "msgid"),
    10: .same(proto: "payload64"),
    11: .same(proto: "ck"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self.checksum)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.magic)
      case 3: try decoder.decodeSingularUInt32Field(value: &self.len)
      case 4: try decoder.decodeSingularUInt32Field(value: &self.incompatFlags)
      case 5: try decoder.decodeSingularUInt32Field(value: &self.compatFlags)
      case 6: try decoder.decodeSingularUInt32Field(value: &self.seq)
      case 7: try decoder.decodeSingularUInt32Field(value: &self.sysid)
      case 8: try decoder.decodeSingularUInt32Field(value: &self.compid)
      case 9: try decoder.decodeSingularUInt32Field(value: &self.msgid)
      case 10: try decoder.decodeRepeatedUInt64Field(value: &self.payload64)
      case 11: try decoder.decodeRepeatedUInt32Field(value: &self.ck)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.checksum != 0 {
      try visitor.visitSingularUInt32Field(value: self.checksum, fieldNumber: 1)
    }
    if self.magic != 0 {
      try visitor.visitSingularUInt32Field(value: self.magic, fieldNumber: 2)
    }
    if self.len != 0 {
      try visitor.visitSingularUInt32Field(value: self.len, fieldNumber: 3)
    }
    if self.incompatFlags != 0 {
      try visitor.visitSingularUInt32Field(value: self.incompatFlags, fieldNumber: 4)
    }
    if self.compatFlags != 0 {
      try visitor.visitSingularUInt32Field(value: self.compatFlags, fieldNumber: 5)
    }
    if self.seq != 0 {
      try visitor.visitSingularUInt32Field(value: self.seq, fieldNumber: 6)
    }
    if self.sysid != 0 {
      try visitor.visitSingularUInt32Field(value: self.sysid, fieldNumber: 7)
    }
    if self.compid != 0 {
      try visitor.visitSingularUInt32Field(value: self.compid, fieldNumber: 8)
    }
    if self.msgid != 0 {
      try visitor.visitSingularUInt32Field(value: self.msgid, fieldNumber: 9)
    }
    if !self.payload64.isEmpty {
      try visitor.visitPackedUInt64Field(value: self.payload64, fieldNumber: 10)
    }
    if !self.ck.isEmpty {
      try visitor.visitPackedUInt32Field(value: self.ck, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Passthrough_MavlinkMessage, rhs: Mavsdk_Rpc_Passthrough_MavlinkMessage) -> Bool {
    if lhs.checksum != rhs.checksum {return false}
    if lhs.magic != rhs.magic {return false}
    if lhs.len != rhs.len {return false}
    if lhs.incompatFlags != rhs.incompatFlags {return false}
    if lhs.compatFlags != rhs.compatFlags {return false}
    if lhs.seq != rhs.seq {return false}
    if lhs.sysid != rhs.sysid {return false}
    if lhs.compid != rhs.compid {return false}
    if lhs.msgid != rhs.msgid {return false}
    if lhs.payload64 != rhs.payload64 {return false}
    if lhs.ck != rhs.ck {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Passthrough_CommandInt: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandInt"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "target_system_id"),
    2: .standard(proto: "target_component_id"),
    3: .same(proto: "command"),
    4: .same(proto: "current"),
    5: .same(proto: "autocontinue"),
    6: .same(proto: "params"),
  ]

  fileprivate class _StorageClass {
    var _targetSystemID: UInt32 = 0
    var _targetComponentID: UInt32 = 0
    var _command: UInt64 = 0
    var _current: Bool = false
    var _autocontinue: Bool = false
    var _params: Mavsdk_Rpc_Passthrough_ParamsInt? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _targetSystemID = source._targetSystemID
      _targetComponentID = source._targetComponentID
      _command = source._command
      _current = source._current
      _autocontinue = source._autocontinue
      _params = source._params
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt32Field(value: &_storage._targetSystemID)
        case 2: try decoder.decodeSingularUInt32Field(value: &_storage._targetComponentID)
        case 3: try decoder.decodeSingularUInt64Field(value: &_storage._command)
        case 4: try decoder.decodeSingularBoolField(value: &_storage._current)
        case 5: try decoder.decodeSingularBoolField(value: &_storage._autocontinue)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._params)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._targetSystemID != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._targetSystemID, fieldNumber: 1)
      }
      if _storage._targetComponentID != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._targetComponentID, fieldNumber: 2)
      }
      if _storage._command != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._command, fieldNumber: 3)
      }
      if _storage._current != false {
        try visitor.visitSingularBoolField(value: _storage._current, fieldNumber: 4)
      }
      if _storage._autocontinue != false {
        try visitor.visitSingularBoolField(value: _storage._autocontinue, fieldNumber: 5)
      }
      if let v = _storage._params {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Passthrough_CommandInt, rhs: Mavsdk_Rpc_Passthrough_CommandInt) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._targetSystemID != rhs_storage._targetSystemID {return false}
        if _storage._targetComponentID != rhs_storage._targetComponentID {return false}
        if _storage._command != rhs_storage._command {return false}
        if _storage._current != rhs_storage._current {return false}
        if _storage._autocontinue != rhs_storage._autocontinue {return false}
        if _storage._params != rhs_storage._params {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Passthrough_ParamsInt: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ParamsInt"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "param1"),
    2: .same(proto: "param2"),
    3: .same(proto: "param3"),
    4: .same(proto: "param4"),
    5: .same(proto: "x"),
    6: .same(proto: "y"),
    7: .same(proto: "z"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularFloatField(value: &self.param1)
      case 2: try decoder.decodeSingularFloatField(value: &self.param2)
      case 3: try decoder.decodeSingularFloatField(value: &self.param3)
      case 4: try decoder.decodeSingularFloatField(value: &self.param4)
      case 5: try decoder.decodeSingularInt32Field(value: &self.x)
      case 6: try decoder.decodeSingularInt32Field(value: &self.y)
      case 7: try decoder.decodeSingularFloatField(value: &self.z)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.param1 != 0 {
      try visitor.visitSingularFloatField(value: self.param1, fieldNumber: 1)
    }
    if self.param2 != 0 {
      try visitor.visitSingularFloatField(value: self.param2, fieldNumber: 2)
    }
    if self.param3 != 0 {
      try visitor.visitSingularFloatField(value: self.param3, fieldNumber: 3)
    }
    if self.param4 != 0 {
      try visitor.visitSingularFloatField(value: self.param4, fieldNumber: 4)
    }
    if self.x != 0 {
      try visitor.visitSingularInt32Field(value: self.x, fieldNumber: 5)
    }
    if self.y != 0 {
      try visitor.visitSingularInt32Field(value: self.y, fieldNumber: 6)
    }
    if self.z != 0 {
      try visitor.visitSingularFloatField(value: self.z, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Passthrough_ParamsInt, rhs: Mavsdk_Rpc_Passthrough_ParamsInt) -> Bool {
    if lhs.param1 != rhs.param1 {return false}
    if lhs.param2 != rhs.param2 {return false}
    if lhs.param3 != rhs.param3 {return false}
    if lhs.param4 != rhs.param4 {return false}
    if lhs.x != rhs.x {return false}
    if lhs.y != rhs.y {return false}
    if lhs.z != rhs.z {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Passthrough_CommandLong: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandLong"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "target_system_id"),
    2: .standard(proto: "target_component_id"),
    3: .same(proto: "command"),
    4: .same(proto: "confirmation"),
    5: .same(proto: "params"),
  ]

  fileprivate class _StorageClass {
    var _targetSystemID: UInt32 = 0
    var _targetComponentID: UInt32 = 0
    var _command: UInt64 = 0
    var _confirmation: UInt32 = 0
    var _params: Mavsdk_Rpc_Passthrough_ParamsLong? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _targetSystemID = source._targetSystemID
      _targetComponentID = source._targetComponentID
      _command = source._command
      _confirmation = source._confirmation
      _params = source._params
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt32Field(value: &_storage._targetSystemID)
        case 2: try decoder.decodeSingularUInt32Field(value: &_storage._targetComponentID)
        case 3: try decoder.decodeSingularUInt64Field(value: &_storage._command)
        case 4: try decoder.decodeSingularUInt32Field(value: &_storage._confirmation)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._params)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._targetSystemID != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._targetSystemID, fieldNumber: 1)
      }
      if _storage._targetComponentID != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._targetComponentID, fieldNumber: 2)
      }
      if _storage._command != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._command, fieldNumber: 3)
      }
      if _storage._confirmation != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._confirmation, fieldNumber: 4)
      }
      if let v = _storage._params {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Passthrough_CommandLong, rhs: Mavsdk_Rpc_Passthrough_CommandLong) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._targetSystemID != rhs_storage._targetSystemID {return false}
        if _storage._targetComponentID != rhs_storage._targetComponentID {return false}
        if _storage._command != rhs_storage._command {return false}
        if _storage._confirmation != rhs_storage._confirmation {return false}
        if _storage._params != rhs_storage._params {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Passthrough_ParamsLong: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ParamsLong"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "param1"),
    2: .same(proto: "param2"),
    3: .same(proto: "param3"),
    4: .same(proto: "param4"),
    5: .same(proto: "param5"),
    6: .same(proto: "param6"),
    7: .same(proto: "param7"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularFloatField(value: &self.param1)
      case 2: try decoder.decodeSingularFloatField(value: &self.param2)
      case 3: try decoder.decodeSingularFloatField(value: &self.param3)
      case 4: try decoder.decodeSingularFloatField(value: &self.param4)
      case 5: try decoder.decodeSingularFloatField(value: &self.param5)
      case 6: try decoder.decodeSingularFloatField(value: &self.param6)
      case 7: try decoder.decodeSingularFloatField(value: &self.param7)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.param1 != 0 {
      try visitor.visitSingularFloatField(value: self.param1, fieldNumber: 1)
    }
    if self.param2 != 0 {
      try visitor.visitSingularFloatField(value: self.param2, fieldNumber: 2)
    }
    if self.param3 != 0 {
      try visitor.visitSingularFloatField(value: self.param3, fieldNumber: 3)
    }
    if self.param4 != 0 {
      try visitor.visitSingularFloatField(value: self.param4, fieldNumber: 4)
    }
    if self.param5 != 0 {
      try visitor.visitSingularFloatField(value: self.param5, fieldNumber: 5)
    }
    if self.param6 != 0 {
      try visitor.visitSingularFloatField(value: self.param6, fieldNumber: 6)
    }
    if self.param7 != 0 {
      try visitor.visitSingularFloatField(value: self.param7, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Passthrough_ParamsLong, rhs: Mavsdk_Rpc_Passthrough_ParamsLong) -> Bool {
    if lhs.param1 != rhs.param1 {return false}
    if lhs.param2 != rhs.param2 {return false}
    if lhs.param3 != rhs.param3 {return false}
    if lhs.param4 != rhs.param4 {return false}
    if lhs.param5 != rhs.param5 {return false}
    if lhs.param6 != rhs.param6 {return false}
    if lhs.param7 != rhs.param7 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Passthrough_PassthroughResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PassthroughResult"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "result"),
    2: .standard(proto: "result_str"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.result)
      case 2: try decoder.decodeSingularStringField(value: &self.resultStr)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.result != .unknown {
      try visitor.visitSingularEnumField(value: self.result, fieldNumber: 1)
    }
    if !self.resultStr.isEmpty {
      try visitor.visitSingularStringField(value: self.resultStr, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Mavsdk_Rpc_Passthrough_PassthroughResult, rhs: Mavsdk_Rpc_Passthrough_PassthroughResult) -> Bool {
    if lhs.result != rhs.result {return false}
    if lhs.resultStr != rhs.resultStr {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mavsdk_Rpc_Passthrough_PassthroughResult.Result: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "SUCCESS"),
    2: .same(proto: "CONNECTION_ERROR"),
  ]
}
